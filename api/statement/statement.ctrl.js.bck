const StatementModel = require("../../models/statement");
const mongoose = require("mongoose");

const checkId = (req, res, next) => {
    const id = req.params.id;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).send("Error 400: Unvalid ID.");
    }
    next();
};

const list = (req, res) => {
    const email = res.locals.user.email;
    const role = res.locals.user.role;

    // StatementModel.find((role ? {} : {email: email}), (err, result) => {
    StatementModel.find({email: email}, (err, result) => {
        if (err) return res.status(500).send("Error 500: DB Loading Failed.");
        res.render("statement/list", {result, role});
    }).sort({created: -1}); // -1: DESC
};

const create = (req, res) => {
    const { assortment, amount, description, target, category } = req.body;
    const email = res.locals.user.email;
    if (!assortment || !amount || !description || !target || !category || !email) {
        return res.status(400).send("Error 400: Required Input is not given.");
    }

    StatementModel.create({ assortment, amount, description, target, category, email }, (err, result) => {
        if (err) return res.status(500).send("Error 500: Creating Error Occured.");
        res.status(201).send("Successfully Created Statement Data.");
    });
};

const detail = (req, res) => {
    const id = req.params.id;

    StatementModel.findOne({ _id: id }, (err, result) => {
        if (err) return res.status(500).send("Error 500: DB Finding Error Occured.");
        if (!result) return res.status(404).send("Error 404: Not Found.");
        res.render("statement/detail", {result});
    });
};

const remove = (req, res) => {
    const id = req.params.id;

    StatementModel.findByIdAndDelete(id, (err, result) => {
        if (err) return res.status(500).send("Error 500: Erasing Error Occured.");
        if (!result) return res.status(404).send("Error 404: Not Found");
        res.json(result);
    });
};

const update = (req, res) => {
    const id = req.params.id;
    const { assortment, amount, description, target, category } = req.body;

    StatementModel.findByIdAndUpdate(id, { assortment, amount, description, target, category }, { new: true }, (err, result) => {
        if (err) return res.status(500).send("Error 500: DB Finding Error Occured.");
        if (!result) return res.status(404).send("Error 404: Not Found.");
        res.json(result);
    });
};

const showCreatePage = (req, res) => {
    res.render("statement/create");
};

const showUpdatePage = (req, res) => {
    const id = req.params.id;

    StatementModel.findById(id, (err, result) => {
        if (err) return res.status(500).send("Error 500: DB Finding Error Occured.");
        if (!result) return res.status(404).send("Error 404: Not Found.");
        res.render("statement/update", { result });
    });
};

module.exports = { list, create, checkId, detail, remove, update, showCreatePage, showUpdatePage };